openapi: 3.0.0
info:
  title: Event Management API
  version: 1.0.0
  description: API for managing events, users, and registrations

servers:
  - url: http://localhost:8000/api/v1
    description: Local development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    User:
      type: object
      properties:
        name:
          type: string
          example: "Kate"
        email:
          type: string
          format: email
          example: "kate@example.com"
        password:
          type: string
          example: "123456!qwertQ"
        role:
          type: string
          enum: [organizer, attendee]
          example: "organizer"
      required:
        - name
        - email
        - password
        - role  
    
    Event:
      type: object
      properties:
        name:
          type: string
          example: "Tech Conference 2025"
        description:
          type: string
          example: "Annual technology conference 2025"
        date:
          type: string
          format: date-time
          example: "2025-12-12T09:00:00.000Z"
        location:
          type: string
          example: "Convention Center"
        capacity:
          type: integer
          example: 500
        status:
          type: string
          enum: [draft, published]
          example: "draft"
      required:
        - name
        - description
        - date
        - location
        - capacity

    Registration:
      type: object
      properties:
        eventid:
          type: integer
        status:
          type: string
          enum: [pending, confirmed, cancelled]

paths:
  /users/register:
    post:
      tags:
        - Users
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
        '400':
          description: Invalid input

  /users/login:
    post:
      tags:
        - Users
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string

  /users:
    get:
      tags:
        - Users
      summary: Get all users
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: role
          schema:
            type: string
      responses:
        '200':
          description: List of users retrieved successfully    
    
  /users/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - Users
      summary: Get user by ID
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User retrieved successfully
    
    put:
      tags:
        - Users
      summary: Update user
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
    
    delete:
      tags:
        - Users
      summary: Delete user
      security:
        - BearerAuth: []
      responses:
        '204':
          description: User deleted successfully

  /events:
    get:
      tags:
        - Events
      summary: Get all events for authenticated user
      description: Returns events based on the user's role. For organizers, returns their created events. 
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of events retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '401':
          description: Unauthorized - Invalid or missing token
    
    post:
      tags:
        - Events
      summary: Create a new event
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '201':
          description: Event created successfully

  /events/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - Events
      summary: Get event by ID
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Event retrieved successfully
    
    put:
      tags:
        - Events
      summary: Update event
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '200':
          description: Event updated successfully
    
    delete:
      tags:
        - Events
      summary: Delete event
      security:
        - BearerAuth: []
      responses:
        '204':
          description: Event deleted successfully

  /registrations:
    get:
      tags:
        - Registrations
      summary: Get all registrations
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of registrations retrieved successfully
    
    post:
      tags:
        - Registrations
      summary: Create a new registration
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Registration'
      responses:
        '201':
          description: Registration created successfully

  /registrations/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - Registrations
      summary: Get registration by ID
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Registration retrieved successfully
    
    put:
      tags:
        - Registrations
      summary: Update registration
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Registration'
      responses:
        '200':
          description: Registration updated successfully
    
    delete:
      tags:
        - Registrations
      summary: Delete registration
      security:
        - BearerAuth: []
      responses:
        '204':
          description: Registration deleted successfully