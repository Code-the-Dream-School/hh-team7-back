openapi: 3.0.0
info:
  title: Event Management API
  version: 1.0.0
  description: API for managing events, users, and registrations

servers:
  - url: http://localhost:8000/api/v1
    description: Local development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    User:
      type: object
      properties:
        name:
          type: string
          example: "Kate"
        email:
          type: string
          format: email
          example: "kate@example.com"
        password:
          type: string
          example: "123456!qwertQ"
        role:
          type: string
          enum: [organizer, attendee]
          example: "organizer"
      required:
        - name
        - email
        - password
        - role  
    
    Event:
      type: object
      properties:
        name:
          type: string
          example: "Tech Conference 2025"
        description:
          type: string
          example: "Annual technology conference 2025"
        date:
          type: string
          format: date-time
          example: "2025-12-12T09:00:00.000Z"
        location:
          type: string
          example: "Convention Center"
        capacity:
          type: integer
          example: 500
        status:
          type: string
          enum: [draft, published]
          example: "draft"
        event_banner_url:
          type: string
          example: "/uploads/event-image-123.jpg"
      required:
        - name
        - description
        - date
        - location
        - capacity

    Registration:
      type: object
      properties:
        eventId:
          type: integer
        status:
          type: string
          enum: [pending, confirmed, canceled]

paths:
  /users/register:
    post:
      tags:
        - Users
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
        '400':
          description: Invalid input

  /users/login:
    post:
      tags:
        - Users
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
  /users/logout:
    post:
      tags:
      - Users
      summary: User logout
      description: ''
      operationId: Userlogout
      parameters: []
      responses:
        '201':
          description: User logout successfully
          headers: {}
          content: {}
      deprecated: false

  /users/password-reset/request:
    post:
      tags:
      - Users
      summary: Reset password request
      description: ''
      operationId: Resetpasswordrequest
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              type: object
              example:
                email: test@test.com
            example:
              email: test@test.com
        required: true
      responses:
        '201':
          description: User created successfully
          headers: {}
          content: {}
      deprecated: false
      security: []

  /users/password-reset/verify:
    post:
      tags:
      - Users
      summary: Reset password verify
      description: ''
      operationId: Resetpasswordverify
      parameters:
      - name: Content-Type
        in: header
        description: ''
        required: true
        style: simple
        schema:
          enum:
          - application/json
          type: string
      - name: auth
        in: query
        description: ''
        required: true
        style: form
        explode: true
        schema:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTksInVzZXJuYW1lIjoiZW1haWwgdGVzdCIsImlhdCI6MTczNDA0OTAzNiwiZXhwIjoxNzM0MDQ5NjM2fQ.3g6kFdfr65FGgkaMpcYaHXBysKINiSP-IHO0uiEWzWU
      responses:
        '201':
          description: User created successfully
          headers: {}
          content: {}
      deprecated: false
      security: []

  /users/password-reset/update:
    post:
      tags:
      - Users
      summary: Reset password update
      description: ''
      operationId: Resetpasswordupdate
      parameters:
      - name: auth
        in: query
        description: ''
        required: true
        style: form
        explode: true
        schema:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTksInVzZXJuYW1lIjoiZW1haWwgdGVzdCIsImlhdCI6MTczNDA0OTAzNiwiZXhwIjoxNzM0MDQ5NjM2fQ.3g6kFdfr65FGgkaMpcYaHXBysKINiSP-IHO0uiEWzWU
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              type: object
              example:
                password: abc123!
            example:
              password: abc123!
        required: true
      responses:
        '201':
          description: User created successfully
          headers: {}
          content: {}
      deprecated: false
      security: []

  /users:
    get:
      tags:
        - Users
      summary: Get all users
      security: []
      responses:
        '200':
          description: List of users retrieved successfully    
    
  /users/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - Users
      summary: Get user by ID
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User retrieved successfully
    
    put:
      tags:
        - Users
      summary: Update authenticated user's information
      description: Allows an authenticated user to update their own profile (name, email, password, etc.)
      security:
        - BearerAuth: []  
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  #example: "John Doe"
                email:
                  type: string
                  #example: "john.doe@example.com"
                password:
                  type: string
                  #example: "newpassword123"
                file: # File to be uploaded, which will be saved in the profilePictureUrl field in the database
                  type: string
                  format: binary
                  #example: "The user profile image"
      responses:
        '200':
          description: User updated successfully
    
    delete:
      tags:
        - Users
      summary: Delete user
      security: []
      responses:
        '204':
          description: User deleted successfully
          
  /public-events:
      get:
        tags:
          - Public Events
        summary: Get all events for non-authenticated user
        description: |
          Returns all events that are publicly available to non-authenticated users. 
          For non-authenticated users, only events that are publicly accessible will be returned. 
          The events are not filtered by user role and do not require authentication.
        parameters:
          - in: query
            name: page
            required: false
            schema:
              type: integer
              default: 1
            description: The page number to fetch (default is 1).
          - in: query
            name: limit
            required: false
            schema:
              type: integer
              default: 10
            description: The number of events to return per page (default is 10).
          - in: query
            name: search
            required: false
            schema:
              type: string
            description: A search term to filter events by name, description, or location (case-insensitive).
          - in: query
            name: start_date
            required: false
            schema:
              type: string
              format: date
            description: Filter events that start on or after this date.
          - in: query
            name: end_date
            required: false
            schema:
              type: string
              format: date
            description: Filter events that end on or before this date.
        responses:
          200:
            description: A list of all publicly accessible events.
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Event'
          500:
            description: Internal Server Error
    
  /public-events/{id}:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      get:
        tags:
          - Public Events
        summary: Get event by ID
        responses:
          '200':
            description: Event retrieved successfully
    
  /events:
    get:
      tags:
        - Events
      summary: Get all events for authenticated user
      description: Returns events based on the user's role. For organizers, returns their created events. 
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of events retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '401':
          description: Unauthorized - Invalid or missing token
    
    post:
      tags:
        - Events
      summary: Create a new event with image
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Tech Conference 2025"
                description:
                  type: string
                  example: "Annual technology conference 2025"
                date:
                  type: string
                  format: date-time
                  example: "2025-12-12T09:00:00.000Z"
                location:
                  type: string
                  example: "Convention Center"
                capacity:
                  type: integer
                  example: 500
                status:
                  type: string
                  enum: [draft, published]
                  example: "draft"
                event_banner_url:
                  type: string
                  format: binary
                  description: "The event banner image"
      responses:
        '201':
          description: Event created successfully

  /events/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - Events
      summary: Get event by ID
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Event retrieved successfully
    
    put:
      tags:
        - Events
      summary: Update event
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Tech Conference 2025"
                description:
                  type: string
                  example: "Annual technology conference 2025"
                date:
                  type: string
                  format: date-time
                  example: "2025-12-12T09:00:00.000Z"
                location:
                  type: string
                  example: "Convention Center"
                capacity:
                  type: integer
                  example: 500
                status:
                  type: string
                  enum: [draft, published]
                  example: "draft"
                file:
                  type: string
                  format: binary
                  description: "The event banner image"
      responses:
        '200':
          description: Event updated successfully
    
    delete:
      tags:
        - Events
      summary: Delete event
      security:
        - BearerAuth: []
      responses:
        '204':
          description: Event deleted successfully

  /registrations:
    get:
      tags:
        - Registrations
      summary: Get all registrations
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of registrations retrieved successfully
    
    post:
      tags:
        - Registrations
      summary: Create a new registration
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Registration'
      responses:
        '201':
          description: Registration created successfully

  /registrations/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - Registrations
      summary: Get registration by ID
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Registration retrieved successfully
    
    put:
      tags:
        - Registrations
      summary: Update registration
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Registration'
      responses:
        '200':
          description: Registration updated successfully
    
    delete:
      tags:
        - Registrations
      summary: Delete registration
      security:
        - BearerAuth: []
      responses:
        '204':
          description: Registration deleted successfully