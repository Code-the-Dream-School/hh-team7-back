openapi: 3.0.0
info:
  title: Event Management API
  version: 1.0.0
  description: API for managing events, users, and registrations

servers:
  - url: http://localhost:8000/api/v1
    description: Local development server

components:
  schemas:
    User:
      type: object
      properties:
        name: 
          type: string
        email:
          type: string
        password:
          type: string
        role:
          type: string
          enum: [organizer, attendee]
        first_name:
          type: string
        last_name:
          type: string
        nickname:
          type: string
        zipCode:
          type: string
        phone_number:
          type: string
        bio:
          type: string
      required:
        - name
        - email
        - password
        - role

    Event:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        date:
          type: string
          format: date-time
        location:
          type: string
        capacity:
          type: integer
        organizerid:
          type: integer
        price:
          type: number
        status:
          type: string
          enum: [draft, published]
      required:
        - name
        - date
        - organizerid

    Registration:
      type: object
      properties:
        userid:
          type: integer
        eventid:
          type: integer
        status:
          type: string
          enum: [pending, confirmed, cancelled]
        registration_date:
          type: string
          format: date-time
      required:
        - userid
        - eventid
        - status

paths:
  /users:
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
          
    get:
      summary: Get all users
      parameters:
        - name: role
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of users retrieved successfully

  /users/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Get user by ID
      responses:
        '200':
          description: User retrieved successfully
        '404':
          description: User not found

    put:
      summary: Update user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
        '404':
          description: User not found

    delete:
      summary: Delete user
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found

  /events:
    post:
      summary: Create a new event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '201':
          description: Event created successfully

    get:
      summary: Get all events
      parameters:
        - name: organizerId
          in: query
          schema:
            type: integer
        - name: status
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of events retrieved successfully

  /events/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Get event by ID
      responses:
        '200':
          description: Event retrieved successfully
        '404':
          description: Event not found

    put:
      summary: Update event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '200':
          description: Event updated successfully
        '404':
          description: Event not found

    delete:
      summary: Delete event
      responses:
        '204':
          description: Event deleted successfully
        '404':
          description: Event not found

  /registrations:
    post:
      summary: Create a new registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Registration'
      responses:
        '201':
          description: Registration created successfully

    get:
      summary: Get all registrations
      parameters:
        - name: userId
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: List of registrations retrieved successfully

  /registrations/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Get registration by ID
      responses:
        '200':
          description: Registration retrieved successfully
        '404':
          description: Registration not found

    put:
      summary: Update registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Registration'
      responses:
        '200':
          description: Registration updated successfully
        '404':
          description: Registration not found

    delete:
      summary: Delete registration
      responses:
        '204':
          description: Registration deleted successfully
        '404':
          description: Registration not found